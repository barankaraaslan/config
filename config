#!/bin/python

from argparse import ArgumentParser
from pathlib import Path
from subprocess import run
from os import makedirs
from shlex import split

def arg_parse():
    epilog='''Packages are just configuration files of a program collected in a git repository,
    this program is just a wrapper around git to help out.
    See "git bare" dotfile management and stow to see what inspired this program'''

    parser = ArgumentParser(description='Package tracker', epilog=epilog)
    parser.add_argument('package', help='Package to work on')
    parser.add_argument('--config_home', default=Path.home(), type=Path, help='Directory to search packages')
    parser.add_argument('--work_tree', default=Path('/'), type=Path, help='Git working tree, default is /')
    parser.add_argument('--create', action='store_true', help='Create package')
    parser.add_argument('--save_stat', action='store_true', help='Save tracked files stats')
    parser.add_argument('--apply_stat', action='store_true', help='Apply saved stats to tracked files')
    parser.add_argument('--stat_home', default=Path('/var/config'), type=Path, help='Home directory for stats')
    parser.add_argument('--inside', action='store_true', help='Run git command in repository directory')

    return parser.parse_known_args()

args, git_args = arg_parse()

package_path = f'{args.config_home}/{args.package}'
run_in_repo = lambda params : run(['git', *params], cwd=package_path)
git_cmd = lambda params: run(['git', f'--work-tree={args.work_tree}', f'--git-dir={package_path}', *params])

if args.create:
    makedirs(package_path)
    run_in_repo(split('init --bare'))
    run_in_repo(split('config --local status.showUntrackedFiles no'))

    # create stat storage
    stat_dir_path = f'{args.stat_home}/{args.package}'
    makedirs(stat_dir_path)
    stat_file_path = f'{stat_dir_path}/stats.ini'
    with open(stat_file_path, 'x'):
        pass
    git_cmd(split(f'add {stat_file_path}'))
    git_cmd(split('commit -m "initial commit"'))
    exit(0)

if args.save_stat:
    print('save')
if args.save_stat:
    print('apply')
if args.inside:
    run_in_repo(git_args)
else:
    git_cmd(git_args)
