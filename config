#!/bin/python

from argparse import ArgumentParser
from configparser import ConfigParser
from pathlib import Path
from subprocess import run
from os import makedirs, stat, chown, chmod
from shlex import split

def arg_parse():
    epilog='''Packages are just configuration files of a program collected in a git repository,
    this program is just a wrapper around git to help out.
    See "git bare" dotfile management and stow to see what inspired this program'''

    parser = ArgumentParser(description='Package tracker', epilog=epilog)
    parser.add_argument('package', help='Package to work on')
    parser.add_argument('--config_home', default=Path.home(), type=Path, help='Directory to search packages')
    parser.add_argument('--work_tree', default=Path('/'), type=Path, help='Git working tree, default is /')
    parser.add_argument('--create', action='store_true', help='Create package')
    parser.add_argument('--save_stat', action='store_true', help='Save tracked files stats')
    parser.add_argument('--apply_stat', action='store_true', help='Apply saved stats to tracked files')
    parser.add_argument('--stat_home', default=Path('/var/config'), type=Path, help='Home directory for stats')
    parser.add_argument('--inside', action='store_true', help='Run git command in repository directory')

    return parser.parse_known_args()

args, git_args = arg_parse()

# TODO: unify run calls, use expressive approach or lambda approach
package_path = f'{args.config_home}/{args.package}'
run_in_repo = lambda params : run(['git', *params], cwd=package_path)
git_cmd = lambda params: run(['git', f'--work-tree={args.work_tree}', f'--git-dir={package_path}', *params])

stat_dir_path = f'{args.stat_home}/{args.package}'
makedirs(stat_dir_path, exist_ok=True)
stat_file_path = str(Path(f'{stat_dir_path}/stats.ini').resolve())

if args.create:
    makedirs(package_path, exist_ok=True)
    run_in_repo(split('init --bare'))
    run_in_repo(split('config --local status.showUntrackedFiles no'))

    # create stat storage
    with open(stat_file_path, 'x'):
        pass
    git_cmd(split(f'add {stat_file_path}'))
    git_cmd(split('commit -m "initial commit"'))
    exit(0)

branch = run('git rev-parse --abbrev-ref HEAD', cwd=package_path, shell=True, capture_output=True, text=True).stdout.strip()
tracked_files = run(f'git ls-tree -r {branch} --name-only', cwd=package_path, shell=True, capture_output=True, text=True).stdout.strip().split()

if args.save_stat:
    stats = ConfigParser()
    for i in tracked_files:
        stat_result = stat(f'{args.work_tree}/{i}')
        stats[i] = {}
        stats[i]['mode'] = str(stat_result.st_mode)
        stats[i]['uid'] = str(stat_result.st_uid)
        stats[i]['gid'] = str(stat_result.st_gid)

    with open(stat_file_path, 'w') as stats_file:
        stats.write(stats_file)
    exit(0)

if args.apply_stat:
    stats = ConfigParser(default_section=None)
    stats.read(stat_file_path)
    for i in stats:
        if i:
            chmod(f'{args.work_tree}/{i}', int(stats[i]['mode']))
            chown(f'{args.work_tree}/{i}', int(stats[i]['uid']), int(stats[i]['gid']))
    exit(0)

if args.inside:
    run_in_repo(git_args)
else:
    git_cmd(git_args)
